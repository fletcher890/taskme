// Generated by CoffeeScript 1.7.1
(function() {
  define(["jquery", "jqueryui", "underscore", "backbone", "vent", "views/task", "collections/tasks", "text!templates/tasks/tasks.hbs", "text!templates/partials/filter_dropdown.hbs", "handlebars"], function($, $ui, _, Backbone, Vent, TaskView, TasksCollection, tasksTemplate, filterTemplate, Handlebars) {
    var tasks;
    tasks = Backbone.View.extend({
      template: Handlebars.compile(tasksTemplate),
      events: {
        "click #filterablearea a": "setFilter"
      },
      initialize: function() {
        this.childViews = [];
        this.listenTo(this.collection, "reset", this.render);
        this.listenTo(this.collection, "reset", this.render);
        this.listenTo(Vent, "task:create", this.renderNewTask);
        this.listenTo(Vent, "collection:add", this.render);
        this.listenTo(Vent, "drop:sort", this.updateSortOrder);
        this.on("change:filterValue", this.filterByImportance, this);
        this.collection.fetch({
          reset: true
        });
        return this.filterValue = void 0;
      },
      render: function() {
        this.$el.html(this.template({
          collection: this.collection
        }));
        this.$el.find("#filterablearea").append(this.createImportanceSelect());
        this.collection.forEach(this.renderTask, this);
        Vent.trigger('app.event');
        $("#taskList").sortable({
          stop: function(event, ui) {
            ui.item.trigger("drop", ui.item.index());
          }
        });
        return this;
      },
      renderNewTask: function(model) {
        if (typeof this.filterValue === 'undefined') {
          this.collection.fetch({
            reset: true
          });
          return Vent.trigger("collection:add");
        } else {
          return this.filterByImportance();
        }
      },
      renderTask: function(model) {
        var view;
        view = new TaskView({
          model: model,
          collection: this.collection
        });
        this.childViews.push(view);
        return this.$('#taskList').append(view.render().el);
      },
      setFilter: function(e) {
        e.preventDefault();
        this.filterValue = $(e.currentTarget).attr("data-ref");
        return this.trigger("change:filterValue");
      },
      updateSortOrder: function(event, model, position) {
        this.collection.remove(model);
        this.collection.each(function(model, index) {
          var ordinal;
          ordinal = index;
          if (index >= position) {
            ordinal += 1;
          }
          model.set("sortable_place", ordinal);
          model.save();
        });
        model.set("sortable_place", position);
        model.save();
        return this.collection.add(model, {
          at: position
        });
      },
      filterByImportance: function() {
        var c;
        if (this.filterValue === 'tasks-live') {
          this.collection.fetch({
            success: (function(_this) {
              return function(collection) {
                return _this.render();
              };
            })(this)
          });
          return this.filterValue = void 0;
        } else if (this.filterValue === 'tasks-archive') {
          c = new TasksCollection({
            url: '/tasks/archive'
          });
          c.url = '/tasks/archive';
          return c.fetch({
            success: (function(_this) {
              return function() {
                _this.collection.reset(c.models);
                return _this.render();
              };
            })(this)
          });
        } else {
          return this.collection.fetch({
            success: (function(_this) {
              return function() {
                var filterValue, filtered, val;
                filterValue = _this.filterValue;
                if (filterValue === 'importance-high') {
                  val = '1';
                } else if (filterValue === 'importance-medium') {
                  val = '2';
                } else {
                  val = '3';
                }
                filtered = _.filter(_this.collection.models, function(item) {
                  return item.get("importance").toLowerCase() === val;
                });
                _this.collection.reset(filtered);
                return _this.render();
              };
            })(this)
          });
        }
      },
      createImportanceSelect: function() {
        return $(filterTemplate);
      }
    });
    return tasks;
  });

}).call(this);
