// Generated by CoffeeScript 1.7.1
(function() {
  define(["jquery", "underscore", "backbone", "vent", "views/comment", "text!templates/tasks/task.hbs", "handlebars"], function($, _, Backbone, Vent, CommentView, taskTemplate, Handlebars) {
  var task;
  task = Backbone.View.extend({
    initialize: function() {},
    tagName: 'li',
    className: 'list-group-item',
    events: {
      'click .btn.commentAdd': 'addComment',
      'click .btn.editTask': 'editTask',
      'click .btn.archiveTask': 'archiveTask',
      'click .btn.removeTask': 'removeTask',
      'click .btn.reinstateTask': 'reinstateTask',
      'drop': 'drop'
    },
    template: Handlebars.compile(taskTemplate),
    render: function() {
      this.$el.html(this.template(this.model.toJSON()));
      return this;
    },
    addComment: function(e) {
      var comment, comments;
      e.preventDefault();
      comments = this.model.get('comments');
      comment = {
        comment: $(e.currentTarget).parent().find('.commentTextarea').val(),
        by: 'John Doe',
        created_at: new Date()
      };
      comments.push(comment);
      this.model.set({
        comments: comments
      });
      return this.model.save({
        wait: true
      }, {
        success: (function(_this) {
          return function(model) {
            var comm;
            $(e.currentTarget).parent().find('.commentTextarea').val('');
            comm = new CommentView({
              comment: comment
            });
            _this.$el.find('.commentWrapper .comment .comments').append(comm.render().el);
            return _this.$el.find('span.badge').text(_this.model.get('comments').length);
          };
        })(this)
      });
    },
    archiveTask: function(e, value) {
      if (value == null) {
        value = true;
      }
      e.preventDefault();
      this.model.set({
        archive: value
      });
      return this.model.save({
        wait: true
      }, {
        success: (function(_this) {
          return function(model) {
            Vent.trigger("task:archive", _this.model);
            return _this.closeUpOption();
          };
        })(this)
      });
    },
    reinstateTask: function(e) {
      return this.archiveTask(e, false);
    },
    removeTask: function(e) {
      e.preventDefault();
      if (!confirm("Are you sure?")) {
        return;
      }
      this.model.destroy({
        wait: true
      });
      Vent.trigger("task:destroy", this.model);
      return this.closeUpOption();
    },
    editTask: function() {
      return Vent.trigger("task:edit", this.model);
    },
    drop: function(event, index) {
      return Vent.trigger("drop:sort", event, this.model, index);
    },
    closeUpOption: function() {
      this.$el.find('.commentWrapper').slideUp();
      return this.$el.find('.commentWrapper').parent().fadeOut();
    }
  });
  return task;
});

}).call(this);
